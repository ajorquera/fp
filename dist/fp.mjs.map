{"version":3,"file":"fp.mjs","sources":["../src/HOF/HOF.ts","../src/utils/utils.ts"],"sourcesContent":["type Fn = (...args: any[]) => any;\n\nexport const curryN = (n, fn) => (...args) => args.length >= n ? fn(...args) : curryN(n - args.length, fn.bind(null, ...args));\nexport const curry = (fn: Fn) => curryN(fn.length, fn);\nexport const demethodize = (fn: Fn) => (arg0, ...args) => fn.apply(arg0, args);\nexport const args = (fn: Fn) => (...args) => fn(args);\nexport const flip = (fn: Fn) => (...args) => fn(...args.reverse())\nexport const not = (fn: Fn) => (...args) => !fn(...args);\nexport const negate = (fn: Fn) => (...args) => -fn(...args);\n\nexport const timer = (fn: Fn, log=console.log) => (...args) => {\n  const start = Date.now();\n  const result = fn(...args);\n  const end = Date.now();\n  log(`Time: ${end - start}ms`);\n  return result;\n};\n\nexport const memoize = (fn: Fn, stringify=JSON.stringify) => {\n  const cache = {};\n  return (...args) => {\n    const key = stringify(args)\n    let result = cache[key]\n    if (!result) {\n      result = fn(...args);\n      cache[key] = result;\n    }\n\n    return result;\n  }\n}\n","import { args, curry, curryN, demethodize, flip, not } from '../HOF/index';\n\nexport const values = Object.values;\nexport const entries = Object.entries;\nexport const keys = Object.keys;\n\nexport const binaryOp = (operator) => new Function('a', 'b', `return a ${operator} b`);\nexport const identity = (arg) => () => arg;\nexport const arg = (arg) => arg;\nexport const ifElse = curry(\n  (condition, ifFn, elseFn) =>\n    (...args) =>\n      condition(...args) ? ifFn(...args) : elseFn(...args)\n);\n\nfunction randomNumber(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const pickRandom = (...args) => args[randomNumber(0, args.length - 1)];\n\nexport const map = curryN(2, flip(demethodize(Array.prototype.map)));\nexport const find = curryN(2, flip(demethodize(Array.prototype.find)));\nexport const filter = curryN(2, flip(demethodize(Array.prototype.filter)));\nexport const reduce = curryN(3, flip(demethodize(Array.prototype.reduce)));\nexport const always = (arg) => () => arg;\n\nexport const flat = demethodize(Array.prototype.flat);\nexport const every =\n  (...fns) =>\n  (arg) =>\n    demethodize(Array.prototype.every)(fns, (fn) => fn(arg));\nexport const pipe =\n  (...fns) =>\n  (arg) =>\n    reduce(arg, (acc, fn) => fn(acc), fns);\nexport const some =\n  (...fns) =>\n  (arg) =>\n    fns.some((fn) => fn(arg));\nexport const sum = (...args) => reduce(0, (a, b) => a + b, Array.isArray(args[0]) ? args[0] : args);\nexport const avg = (...args) => sum(...args) / args.length;\nexport const uniq = (arr) => [...new Set(arr)];\n\nexport const compose = flip(pipe);\nexport const substract = args(reduce(binaryOp('-')));\nexport const multiply = args(reduce(binaryOp('*')));\nexport const divide = args(reduce(binaryOp('/')));\n\nexport const getProp = curry((path: string | number, obj) => {\n  const pathArr = String(path).split('.');\n  return pathArr.reduce((acc, val) => (acc === undefined ? acc : acc[val]), obj);\n});\n\nexport const setProp = curry((path: string | number, value, obj) => {\n  const pathArr = String(path).split('.');\n  const lastKey = pathArr.pop();\n  const lastObj = pathArr.reduce((acc, val) => (acc === undefined ? acc : acc[val]), obj);\n  if (lastObj) {\n    lastObj[lastKey] = value;\n  }\n  return obj;\n});\n\nexport const removeProp = curry((attr, obj) => {\n  const { [attr]: _, ...rest } = obj;\n  return rest;\n});\n\n\n\nexport const cloneSpread = (obj) => ({ ...obj });\n\ntype returnSameTypeFn = <T>(arg: T) => T;\nexport const cloneStringify: returnSameTypeFn = (obj) => JSON.parse(JSON.stringify(obj));\nexport const equal = curry((a, b) => a === b);\nexport const typeOf = (x) => typeof x;\nexport const to = curry((constr, x) => new constr(x));\nexport const valueOf = (x) => x.valueOf();\n\nexport const toNumber = pipe(to(Number), valueOf);\nexport const toBoolean = to(Boolean);\nexport const toString = to(String);\nexport const toMap = to(Map);\nexport const toSet = to(Set);\nexport const toDate = to(Date);\nexport const tap = curry((fn, arg) => {\n  fn(arg);\n  return arg;\n});\n\n\n\nexport const isFunction = pipe(typeOf, equal('function'));\nexport const isArray = Array.isArray;\nexport const isBoolean = (x) => typeof x === 'boolean';\nexport const isString = pipe(typeOf, equal('string'))\nexport const isObject = every(pipe(typeOf, equal('object')), not(isArray));\nexport const isNaN = Number.isNaN;\nexport const toAbs = (x, abs = Math.abs) => abs(x);\nexport const isInfinity = pipe(toAbs, equal(Infinity));\nexport const isNumber = every(pipe(toNumber, not(isNaN)), pipe(toAbs, not(isInfinity)));\nexport const instanceOf = curry((constr, x) => x instanceof constr);\nexport const isDate = every(instanceOf(Date), pipe(toNumber, isNumber));\n\nexport const spread = (fn) => (args) => fn(...args);\nexport const max = ifElse(isArray, spread(Math.max), Math.max);\n\nexport const throwError = (msg) => {\n  throw msg;\n};\n\nexport const stringTemplate = curry((template, obj) => {\n  const keys = Object.keys(obj);\n  const values = Object.values(obj);\n  return new Function(...keys, `return \\`${template}\\``)(...values);\n});\n\nexport const ifNotFuncThrowError = ifElse(not(isFunction), (arg) =>\n  throwError('No function provided. Receive: ' + JSON.stringify(arg))\n);\n\nexport const curryE = ifNotFuncThrowError(curry);\nexport const curryNE = ifNotFuncThrowError(curryN);\n\ntype logLevel = 'log' | 'warn' | 'error' | 'info' | 'debug';\ntype console = Pick<Console, logLevel>;\nexport const createLogger = (name: logLevel, prefix = '', cons: console = console) => {\n  return (...args) => (prefix ? cons[name](prefix, ...args) : cons[name](...args));\n};\n\nexport const toLocaleStringNumb = curry((lang: Intl.LocalesArgument, options: Intl.NumberFormatOptions, x: number) =>\n  x.toLocaleString(lang, options)\n);\n\ntype currency = 'USD' | 'EUR';\ntype lang = 'es' | 'en';\nexport const toLocaleCurrency = curry((lang: lang, currency: currency, numb: number) =>\n  toLocaleStringNumb(lang, { style: 'currency', currency }, numb)\n);\n\nexport const len = (obj) => {\n  let len;\n  if(isObject(obj)) {\n    len = pipe(values, getProp('length'))(obj)\n  } else if(isArray(obj) || isString(obj)) {\n    len = getProp('length', obj)\n  }\n\n  return len;\n}"],"names":["args","arg","max","keys","values","len"],"mappings":"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"}