{"version":3,"file":"fp.js","sources":["../src/HOF/HOF.ts","../src/utils/utils.ts"],"sourcesContent":["type Fn = (...args: any[]) => any;\n\nexport const curryN = (n, fn) => (...args) => args.length >= n ? fn(...args) : curryN(n - args.length, fn.bind(null, ...args));\nexport const curry = (fn: Fn) => curryN(fn.length, fn);\nexport const demethodize = (fn: Fn) => (arg0, ...args) => fn.apply(arg0, args);\nexport const args = (fn: Fn) => (...args) => fn(args);\nexport const flip = (fn: Fn) => (...args) => fn(...args.reverse())\nexport const not = (fn: Fn) => (...args) => !fn(...args);\nexport const negate = (fn: Fn) => (...args) => -fn(...args);\n\nexport const timer = (fn: Fn) => (...args) => {\n  const start = Date.now();\n  const result = fn(...args);\n  const end = Date.now();\n  console.log(`Time: ${end - start}ms`);\n  return result;\n};\n\nexport const logger = (fn: Fn) => (...args) => {\n  console.log(`Arguments: ${args}`);\n  const result = fn(...args);\n  console.log(`Result: ${result}`);\n  return result;\n};\n\nexport const memoize = (fn: Fn, stringify=JSON.stringify) => {\n  const cache = {};\n  return (...args) => {\n    const key = stringify(args)\n    let result = cache[key]\n    if (!result) {\n      result = fn(...args);\n      cache[key] = result;\n    }\n\n    return result;\n  }\n}\n","import { args, curry, curryN, demethodize, flip, not } from \"../HOF/index\";\n\nexport const binaryOp = (operator) => new Function('a', 'b', `return a ${operator} b`);\nexport const identity = arg => () => arg;\nexport const ifElse = curry((condition, ifFn, elseFn) => (...args) => condition(...args) ? ifFn(...args) : elseFn(...args));\n\nexport const map = curryN(2, flip(demethodize(Array.prototype.map)));\nexport const reduce = curryN(3, flip(demethodize(Array.prototype.reduce)));\n\nexport const every = (...fns) => arg => demethodize(Array.prototype.every)(fns, fn => fn(arg));\nexport const pipe = (...fns) => arg => reduce(arg, (acc, fn) => fn(acc), fns);\nexport const some = (...fns) => arg => fns.some(fn => fn(arg));\nexport const sum = (...args) => reduce(0, (a,b)=> a + b, Array.isArray(args[0]) ? args[0] : args);                                  \nexport const avg = (...args) => sum(...args) / args.length;\n\nexport const compose = flip(pipe);\nexport const substract = args(reduce(binaryOp('-')));\nexport const multiply = args(reduce(binaryOp('*')));\nexport const divide = args(reduce(binaryOp('/')));\nexport const getProp = curry((attr, obj) => obj[attr]);\n\nexport const cloneSpread = (obj) => ({...obj});\nexport const equal = curry((a,b) => a === b);\nexport const cloneStringify = (obj) => JSON.parse(JSON.stringify(obj)); \nexport const typeOf = (x) => typeof x;\nexport const to = curry((constr, x) => new constr(x));\n\nexport const toNumber = to(Number);\nexport const toBoolean = to(Boolean);\nexport const toSring = to(String);\n\nexport const isInfinity = equal(Infinity);\nexport const isFunction = pipe(typeOf, equal('function'));\nexport const isArray = Array.isArray;\nexport const isBoolean = x => typeof x === 'boolean';\nexport const isNaN = Number.isNaN;\nexport const toAbs = (x, abs=Math.abs) => abs(x)\nexport const isNumber = x => !isNaN(Number(x)) && Math.abs(x) !== Infinity;\nexport const isNumber2 = every(pipe(toNumber, not(isNaN)), pipe(toAbs, not(isInfinity)));\n\n\nexport const throwError = (msg) => { throw msg  };\n\nexport const stringTemplate = curry((template, obj) => {\n    const keys = Object.keys(obj);\n    const values = Object.values(obj);\n    return new Function(...keys, `return \\`${template}\\``)(...values);\n});\n\nexport const ifNotFuncThrowError = ifElse(not(isFunction), (arg) => throwError('No function provided. Receive: ' + JSON.stringify(arg)))\n\nexport const curryE = ifNotFuncThrowError(curry);\nexport const curryNE = ifNotFuncThrowError(curryN);\n\n\nexport const toLocaleStringNumb = curry((lang: Intl.LocalesArgument, options: Intl.NumberFormatOptions, x: number) => x.toLocaleString(lang, options));\n\nexport const formatLocalNumber = toLocaleStringNumb(navigator.language, {});\nexport const formatPercentage = toLocaleStringNumb(navigator.language, {style: 'percent'});\n\ntype currency = 'USD' | 'EUR';\nexport const formatLocalCurrency = curry((currency: currency, numb: number) => toLocaleStringNumb(navigator.language, {style: 'currency', currency}, numb));"],"names":["args"],"mappings":"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"}